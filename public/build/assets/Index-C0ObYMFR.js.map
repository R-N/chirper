{"version":3,"file":"Index-C0ObYMFR.js","sources":["../../../resources/js/modules/chirps/pages/Index.vue","../../../resources/js/modules/chirps/pages/Index.vue"],"sourcesContent":["<script lang=\"ts\">\nimport AppLayout from '@/layouts/AppLayout.vue';\nimport Chirp from '@/modules/chirps/components/Chirp.vue';\nimport { useForm } from '@inertiajs/vue3';\n\nimport { VContainer, VTextarea, VBtn, VCard } from 'vuetify/components';\nimport { Component, Prop, Vue, toNative } from 'vue-facing-decorator';\nimport chirpService from '../services/chirp';\nimport { findIndex, deleteFromArray } from '@/libs/util';\n\n@Component({\n  components: {\n    AppLayout,\n    Chirp,\n    VContainer,\n    VTextarea,\n    VBtn,\n    VCard\n  }\n})\nclass ChirpsPage extends Vue {\n  @Prop({ type: Array }) chirps = []; // Adjust the type as necessary for chirps\n\n  // Form data\n  form = useForm({\n    message: '',\n  });\n\n  mounted(){\n  }\n\n  async storeChirp(){\n    let res = await chirpService.store(this.form);\n    this.chirps.unshift(res.chirp);\n\n    this.form.reset();\n  }\n  updateChirp(chirp){\n    const index = findIndex(this.chirps, chirp);\n    if (index !== -1) {\n      this.chirps[index] = chirp; // Replace with updated chirp\n    }\n  }\n  destroyChirp(chirp){\n    deleteFromArray(this.chirps, chirp);\n  }\n}\nexport default toNative(ChirpsPage);\n</script>\n \n<template>\n  <AppLayout title=\"Chirps\">\n    <VContainer class=\"max-w-2xl mx-auto p-4 sm:p-6 lg:p-8\">\n      <form @submit.prevent=\"storeChirp\">\n        <VTextarea\n          v-model=\"form.message\"\n          label=\"What's on your mind?\"\n          variant=\"outlined\"\n        />\n        <VBtn class=\"mt-4\" color=\"primary\" type=\"submit\">Chirp</VBtn>\n      </form>\n      <VCard class=\"mt-6\">\n        <Chirp\n          v-for=\"chirp in chirps\"\n          :key=\"chirp.id\"\n          :chirp=\"chirp\"\n          @destroy=\"destroyChirp\" \n          @update=\"updateChirp\" \n        />\n      </VCard>\n    </VContainer>\n  </AppLayout>\n</template>\n","<script lang=\"ts\">\nimport AppLayout from '@/layouts/AppLayout.vue';\nimport Chirp from '@/modules/chirps/components/Chirp.vue';\nimport { useForm } from '@inertiajs/vue3';\n\nimport { VContainer, VTextarea, VBtn, VCard } from 'vuetify/components';\nimport { Component, Prop, Vue, toNative } from 'vue-facing-decorator';\nimport chirpService from '../services/chirp';\nimport { findIndex, deleteFromArray } from '@/libs/util';\n\n@Component({\n  components: {\n    AppLayout,\n    Chirp,\n    VContainer,\n    VTextarea,\n    VBtn,\n    VCard\n  }\n})\nclass ChirpsPage extends Vue {\n  @Prop({ type: Array }) chirps = []; // Adjust the type as necessary for chirps\n\n  // Form data\n  form = useForm({\n    message: '',\n  });\n\n  mounted(){\n  }\n\n  async storeChirp(){\n    let res = await chirpService.store(this.form);\n    this.chirps.unshift(res.chirp);\n\n    this.form.reset();\n  }\n  updateChirp(chirp){\n    const index = findIndex(this.chirps, chirp);\n    if (index !== -1) {\n      this.chirps[index] = chirp; // Replace with updated chirp\n    }\n  }\n  destroyChirp(chirp){\n    deleteFromArray(this.chirps, chirp);\n  }\n}\nexport default toNative(ChirpsPage);\n</script>\n \n<template>\n  <AppLayout title=\"Chirps\">\n    <VContainer class=\"max-w-2xl mx-auto p-4 sm:p-6 lg:p-8\">\n      <form @submit.prevent=\"storeChirp\">\n        <VTextarea\n          v-model=\"form.message\"\n          label=\"What's on your mind?\"\n          variant=\"outlined\"\n        />\n        <VBtn class=\"mt-4\" color=\"primary\" type=\"submit\">Chirp</VBtn>\n      </form>\n      <VCard class=\"mt-6\">\n        <Chirp\n          v-for=\"chirp in chirps\"\n          :key=\"chirp.id\"\n          :chirp=\"chirp\"\n          @destroy=\"destroyChirp\" \n          @update=\"updateChirp\" \n        />\n      </VCard>\n    </VContainer>\n  </AppLayout>\n</template>\n"],"names":["useForm","Prop","_resolveComponent","_openBlock","_createBlock","_withCtx","_createVNode","_component_VContainer","_createElementVNode","_withModifiers","_component_VTextarea","_component_VBtn","_createTextVNode","_component_VCard","_createElementBlock","_Fragment","_renderList","destroyChirp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAM,aAAN,cAAyB,IAAI;AAAA,EAA7B;AAAA;AACyB,kCAAS,CAAC;AAGjC;AAAA;AAAA,gCAAOA,EAAQ;AAAA,MACb,SAAS;AAAA,IAAA,CACV;AAAA;AAAA,EAED,UAAS;AAAA,EAAA;AAAA,EAGT,MAAM,aAAY;AAChB,QAAI,MAAM,MAAM,aAAa,MAAM,KAAK,IAAI;AACvC,SAAA,OAAO,QAAQ,IAAI,KAAK;AAE7B,SAAK,KAAK,MAAM;AAAA,EAAA;AAAA,EAElB,YAAY,OAAM;AAChB,UAAM,QAAQ,UAAU,KAAK,QAAQ,KAAK;AAC1C,QAAI,UAAU,IAAI;AACX,WAAA,OAAO,KAAK,IAAI;AAAA,IAAA;AAAA,EACvB;AAAA,EAEF,aAAa,OAAM;AACD,oBAAA,KAAK,QAAQ,KAAK;AAAA,EAAA;AAEtC;AAzByB,gBAAA;AAAA,EAAtBC,UAAK,EAAE,MAAM,MAAO,CAAA;AAAA,GADjB,WACmB,WAAA,UAAA,CAAA;AADnB,aAAN,gBAAA;AAAA,EAVC,UAAU;AAAA,IACT,YAAY;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEH,CAAA;AAAA,GACK,UAAA;AA2BN,MAAe,YAAA,SAAS,UAAU;;;+BCIhCC,iBAoBY,WAAA;AAnBV,SAAAC,UAAkB,GAAAC,YAAA,sBAAA,EAAA,OAAA,YAAA;AAAA,IAAA,SApDtBC,QA4Da,MAAA;AAAA,MAAAC,YAPPC,YAOO,EAAA,OAAA,sCAAA,GAAA;AAAA,QAAA,SAPAF,QAAM,MAAA;AAAA,UAAAG,gBAAA,QAAA;AAAA,YACX,UAIE,OAAA,CAAA,MAAA,OAAA,CAAA,IAAAC,cAAA,IAAA,SAAA,KAAA,cAAA,KAAA,WAAA,GAAA,IAAA,GAAA,CAAA,SAAA,CAAA;AAAA,UAAA,GAAA;AAAA,YA1DVH,YAAAI,WAAA;AAAA,cAwDU,YAAM,KAAA,KAAA;AAAA,cACN,uBAAkB,OAAA,CAAA,MAAA,OAAA,CAAA,IAAA,CAAA,WAAA,KAAA,KAAA,UAAA;AAAA,cAAA,OAAA;AAAA,cAEpB,SAAA;AAAA,YAAA,GAAM,MAAM,GAAM,CAAA,YAAA,CAAA;AAAA,YAAAJ,YAAOK,MAAS;AAAA,cAAC,OAAK;AAAA,cAAA,OAAA;AAAA,cA3DhD,MAAA;AAAA,YAAA,GAAA;AAAA;gBAAAC,gBAAA,OAAA;AAAA,cAAA,EAAA;AAAA;YA6DM,CAAA;AAAA,UA7DN,GAAA,EAAA;AAAA,UAAAN,YAAAO,OA8DQ,EAME,OAAA,OAAA,GAAA;AAAA,YAAA,SAAAR,QAAA,MAAA;AAAA,eAJMF,UAAA,IAAM,GAAEW,mBAAAC,UAAA,MAAAC,WAAA,KAAA,QAAA,CAAA,UAAA;uBACRb,UAAO,GAAAC,YAAA,kBAAA;AAAA,kBACZ,KAASa,MAAAA;AAAAA,kBACT;AAAA,kBAAA,WAAA,KAAA;AAAA;;cAnEX,CAAA,GAAA,GAAA;AAAA,YAAA,CAAA;AAAA;UAAA,CAAA;AAAA,QAAA,CAAA;AAAA;MAAA,CAAA;AAAA,IAAA,CAAA;AAAA;;;;"}