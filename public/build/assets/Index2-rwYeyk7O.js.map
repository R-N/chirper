{"version":3,"file":"Index2-rwYeyk7O.js","sources":["../../../resources/js/modules/chirps/views/FormDialog.vue","../../../resources/js/modules/chirps/views/FormDialog.vue","../../../resources/js/modules/chirps/views/Chirp.vue","../../../resources/js/modules/chirps/pages/Index2.vue","../../../resources/js/modules/chirps/pages/Index2.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport { Component, Prop, Emit, toNative } from 'vue-facing-decorator';\r\nimport FormDialog from '@/components/form/FormDialog.vue';\r\nimport { FormDialogBase } from '@/components/form/FormDialogBase.vue';\r\nimport { useForm } from '@inertiajs/vue3';\r\nimport chirpService from '../services/chirp';\r\nimport { VTextField } from 'vuetify/components';\r\n\r\n@Component({\r\n    name: \"ChirpFormDialog\",\r\n    components: {\r\n        FormDialog,\r\n        VTextField\r\n    },\r\n    emits: ['submit']\r\n})\r\nclass ChirpFormDialog extends FormDialogBase {\r\n    @Prop({ type: Object, default: null }) data;\r\n    form = useForm({\r\n        message: '',\r\n    });\r\n\r\n    reset(){\r\n        this.form.reset();\r\n    }\r\n\r\n    async submit(){\r\n        if(!this.valid) return;\r\n        const view = this;\r\n        view.busy = true;\r\n        try{\r\n            let res = null;\r\n            if (this.data){\r\n                res = await chirpService.update(this.data, this.form);\r\n            }else{\r\n                res = await chirpService.store(this.form);\r\n            }\r\n            view.emitSubmit(res.chirp);\r\n            view.close();\r\n        } finally {\r\n            view.busy = false;\r\n        }\r\n    }\r\n\r\n    @Emit(\"submit\")\r\n    emitSubmit(chirp){\r\n        return chirp;\r\n    }\r\n}\r\nexport { ChirpFormDialog }\r\nexport default toNative(ChirpFormDialog);\r\n</script>\r\n<template>\r\n    <FormDialog\r\n        max-width=\"400\"\r\n        :parent-busy=\"busy\"\r\n        :on-submit=\"submit\"\r\n        title=\"Chirp\"\r\n        :disabled=\"disabled\"\r\n        :on-reset=\"reset\"\r\n        v-model=\"myDialog\"\r\n    >\r\n        <template v-slot:fields=\"{ interactable, busy }\">\r\n            <VTextField \r\n                name=\"message\"\r\n                class=\"bigger-input\" \r\n                label=\"Message\" \r\n                v-model=\"form.message\" \r\n                :disabled=\"!interactable\" \r\n                required\r\n            />\r\n        </template>\r\n    </FormDialog>\r\n</template>\r\n<style scoped>\r\n</style>\r\n","<script lang=\"ts\">\r\nimport { Component, Prop, Emit, toNative } from 'vue-facing-decorator';\r\nimport FormDialog from '@/components/form/FormDialog.vue';\r\nimport { FormDialogBase } from '@/components/form/FormDialogBase.vue';\r\nimport { useForm } from '@inertiajs/vue3';\r\nimport chirpService from '../services/chirp';\r\nimport { VTextField } from 'vuetify/components';\r\n\r\n@Component({\r\n    name: \"ChirpFormDialog\",\r\n    components: {\r\n        FormDialog,\r\n        VTextField\r\n    },\r\n    emits: ['submit']\r\n})\r\nclass ChirpFormDialog extends FormDialogBase {\r\n    @Prop({ type: Object, default: null }) data;\r\n    form = useForm({\r\n        message: '',\r\n    });\r\n\r\n    reset(){\r\n        this.form.reset();\r\n    }\r\n\r\n    async submit(){\r\n        if(!this.valid) return;\r\n        const view = this;\r\n        view.busy = true;\r\n        try{\r\n            let res = null;\r\n            if (this.data){\r\n                res = await chirpService.update(this.data, this.form);\r\n            }else{\r\n                res = await chirpService.store(this.form);\r\n            }\r\n            view.emitSubmit(res.chirp);\r\n            view.close();\r\n        } finally {\r\n            view.busy = false;\r\n        }\r\n    }\r\n\r\n    @Emit(\"submit\")\r\n    emitSubmit(chirp){\r\n        return chirp;\r\n    }\r\n}\r\nexport { ChirpFormDialog }\r\nexport default toNative(ChirpFormDialog);\r\n</script>\r\n<template>\r\n    <FormDialog\r\n        max-width=\"400\"\r\n        :parent-busy=\"busy\"\r\n        :on-submit=\"submit\"\r\n        title=\"Chirp\"\r\n        :disabled=\"disabled\"\r\n        :on-reset=\"reset\"\r\n        v-model=\"myDialog\"\r\n    >\r\n        <template v-slot:fields=\"{ interactable, busy }\">\r\n            <VTextField \r\n                name=\"message\"\r\n                class=\"bigger-input\" \r\n                label=\"Message\" \r\n                v-model=\"form.message\" \r\n                :disabled=\"!interactable\" \r\n                required\r\n            />\r\n        </template>\r\n    </FormDialog>\r\n</template>\r\n<style scoped>\r\n</style>\r\n","<script lang=\"ts\">\r\nimport { Component, toNative } from 'vue-facing-decorator';\r\n\r\nimport dayjs from 'dayjs';\r\n\r\nimport ChirpFormDialog from '@/modules/chirps/views/FormDialog.vue';\r\nimport BaseCrudView from '@/views/BaseCrudView.vue';\r\nimport { BaseCrudViewBase } from '@/views/BaseCrudViewBase.vue';\r\nimport EditableCellTextField from '@/components/form/editable_cell/EditableCellTextField.vue';\r\n\r\nimport chirpService from '../services/chirp';\r\nimport { VDataTable } from 'vuetify/components';\r\nimport IconButton from '@/components/button/IconButton.vue';\r\nimport ConfirmationIconButton from '@/components/button/ConfirmationIconButton.vue';\r\n\r\n@Component({\r\n    name: \"ChirpCrudView\",\r\n    components: {\r\n        ChirpFormDialog,\r\n        BaseCrudView,\r\n        EditableCellTextField,\r\n        VDataTable,\r\n        IconButton,\r\n        ConfirmationIconButton\r\n    },\r\n})\r\nclass ChirpCrudView extends BaseCrudViewBase {\r\n    editing = null;\r\n\r\n    get nameField(){ return \"created_at\"; }\r\n    get itemName(){ return 'Chirp'; }\r\n    get client(){ return chirpService; }\r\n    get headers(){\r\n        let headers = [\r\n            { title: 'User', value: 'user' },\r\n            { title: 'Meessage', value: 'message' },\r\n            { title: 'Created At', value: 'created_at' },\r\n            { title: 'Actions', value: 'actions' }\r\n        ];\r\n        return headers;\r\n    }\r\n    duration(time){\r\n        return dayjs(time).fromNow();\r\n    }\r\n    \r\n    async setMessage(chirp, message){\r\n        const view = this;\r\n        view.busy=true;\r\n        try{\r\n            let res = await chirpService.set_message(chirp, message);\r\n            Object.assign(chirp, res.chirp); \r\n        } catch (error) {\r\n            view.showError(error);\r\n        } finally {\r\n            view.busy = false;\r\n        }\r\n    }\r\n\r\n    showForm(chirp=null){\r\n        this.editing = chirp;\r\n        this.formDialog = true;\r\n    }\r\n}\r\nexport { ChirpCrudView };\r\nexport default toNative(ChirpCrudView);\r\n</script>\r\n<template>\r\n    <BaseCrudView \r\n        title=\"Chirps\"\r\n        :create=\"() => showForm()\"\r\n        :fetch=\"fetch\"\r\n        create-text=\"Chirp\"\r\n        v-model:search=\"search\"\r\n    >\r\n        <template v-slot:default>\r\n            <VDataTable\r\n                class=\"backup-table\"\r\n                :headers=\"headers\"\r\n                :items=\"items\"\r\n                item-key=\"id\"\r\n                :search=\"search\"\r\n                :loading=\"busy\"\r\n            >\r\n                <template v-slot:item.message=\"{ item }\">\r\n                    <EditableCellTextField\r\n                        name=\"message\"\r\n                        :confirm-text-maker=\"(value) => setFieldConfirmText('message', item, value)\"\r\n                        :value=\"item.message\" \r\n                        :on-finish=\"(value) => setMessage(item, value)\"\r\n                        :disabled=\"busy\"\r\n                    />\r\n                </template>\r\n                <template v-slot:item.created_at=\"{ item }\">\r\n                    <small class=\"ml-2 text-sm text-gray-600\">{{ duration(item.created_at) }}</small>\r\n                    <small v-if=\"item.created_at !== item.updated_at\" class=\"text-sm text-gray-600\"> &middot; edited</small>\r\n                </template>\r\n                <template v-slot:item.user=\"{ item }\">\r\n                    <span class=\"text-gray-800\">{{ item.user.name }}</span>\r\n                </template>\r\n                <template v-slot:item.actions=\"{ item }\">\r\n                    <IconButton\r\n                        @click.stop=\"() => showForm(item)\" \r\n                        :disabled=\"busy\"\r\n                        icon=\"mdi-pencil\"\r\n                        text=\"Edit\"\r\n                    />\r\n                    <ConfirmationIconButton\r\n                        icon=\"mdi-delete\"\r\n                        text=\"Delete\"\r\n                        :confirmTextMaker=\"deleteConfirmText(item)\"\r\n                        :on-confirm=\"() => deleteItem(item)\"\r\n                        :ask=\"(ask) => askDelete(item, ask)\" \r\n                        :disabled=\"busy\"\r\n                    />\r\n                </template>\r\n            </VDataTable>\r\n            <ChirpFormDialog\r\n                :data=\"editing\"\r\n                v-model=\"formDialog\"\r\n                @submit=\"storeItem\"\r\n                :parent-busy=\"busy\"\r\n            />\r\n        </template>\r\n    </BaseCrudView>\r\n</template>\r\n<style scoped>\r\n</style>\r\n","<script lang=\"ts\">\r\nimport AppLayout from '@/layouts/AppLayout.vue';\r\n\r\nimport { Component, Prop, Vue, toNative } from 'vue-facing-decorator';\r\nimport { ChirpCrudView } from '../views/Chirp.vue';\r\nimport {BaseView} from '@/views/BaseView.vue';\r\n\r\n@Component({\r\n  components: {\r\n    AppLayout,\r\n    ChirpCrudView\r\n  }\r\n})\r\nclass ChirpsPage extends BaseView {\r\n  mounted(){\r\n    this.appStore.breadcrumbs = [\r\n      { title: \"Chirps\" },\r\n    ];\r\n  }\r\n}\r\nexport default toNative(ChirpsPage);\r\n</script>\r\n \r\n<template>\r\n  <AppLayout title=\"Chirps\">\r\n    <VContainer>\r\n      <ChirpCrudView />\r\n    </VContainer>\r\n  </AppLayout>\r\n</template>\r\n","<script lang=\"ts\">\r\nimport AppLayout from '@/layouts/AppLayout.vue';\r\n\r\nimport { Component, Prop, Vue, toNative } from 'vue-facing-decorator';\r\nimport { ChirpCrudView } from '../views/Chirp.vue';\r\nimport {BaseView} from '@/views/BaseView.vue';\r\n\r\n@Component({\r\n  components: {\r\n    AppLayout,\r\n    ChirpCrudView\r\n  }\r\n})\r\nclass ChirpsPage extends BaseView {\r\n  mounted(){\r\n    this.appStore.breadcrumbs = [\r\n      { title: \"Chirps\" },\r\n    ];\r\n  }\r\n}\r\nexport default toNative(ChirpsPage);\r\n</script>\r\n \r\n<template>\r\n  <AppLayout title=\"Chirps\">\r\n    <VContainer>\r\n      <ChirpCrudView />\r\n    </VContainer>\r\n  </AppLayout>\r\n</template>\r\n"],"names":["ChirpFormDialog","useForm","__decorateClass","Prop","Emit","_resolveComponent","_openBlock","_createBlock","submit","disabled","myDialog","_withCtx","_createVNode","_component_VTextField","_component_VContainer"],"mappings":"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"}